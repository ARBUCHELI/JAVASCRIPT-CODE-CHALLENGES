* Five friends
--------------
	- ASYNC: Functions declared with the async keyword, allow us to write asynchronous code in a synchronous manner.
	- Together with the Fetch API, we can make asynchronous API requests.

	Challenge
	---------
		. Build a new component for "Your Space" a brand new social media application that allows you to find friends.
		. Given some JSON data returned from the random user API, you should dynamically generate image thumbnails for the top five friends.
		. You should use the fetch API to call the random user API.

		* Use the random user API
		-------------------------
			. https://randomuser.me/api/?results=5
			. Use async/await
			. Display five users.

	Solution
	--------
		. Let's declare our asynchronous function.
		. We can use either a functio expression or a function declaration.
		. A function expression is when we assign an anonymous function to a variable and invoke the variable.
		. We first want to make a call to the random user API. We can use the fetch API for this.
	
		async funtcion getUsers() {
			let people = fetch("https://randomuser.me/api/?results=5)
		}
	
		. At this point we are not receiving the user's data we expect.  We are receiving a promise.
		. This is because we want to wait to do anything else until we've received data from our API call.
		. This is where the await keyword comes into play.  If we add the await keyword before the Fetch call, our code will pause until we receive a response from the fetch API.
		. Now we receive a response object.

		async function getUsers() {
			let people = await fetch("https://randomuser.me/api/?results=5")
			console.log(people);
		}

		getUsers();	
		. Now we have to turn this reponse into a format we can use.  We'll use the JSON function to transform the response into JSON.
		. After this step we'll get user data.

		async function getUsers() {
			let people = await fetch("https://randomuser.me/api/?results=5");
			let data = await people.json();
			console.log(data);
		}

		getUsers();

		. Finally, we need to create DOM nodes, to display each user's profile picture.
		. Inside of the index.html file, we have a div with an id of timeline.  We can grab this parent node and dynamically generate child nodes for each user.
		. We'll use the document.createElement function to create images for each user's profile picture, and the most at its source attribute.
		. Finally, we'll append our image to the timeline.


five-friends.js
---------------
async function getUsers() {
    let people = await fetch("https://randomuser.me/api/?results=5");
    let data = await people.json();
    
    const timeline = document.querySelector('#timeline');
    data.results.forEach(person => {
        let image = document.createElement('img');
        image.src = person.picture.medium;
        timeline.appendChild(image);
    })
}

getUsers();


index.html
----------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>01_13 Five Friends</title>
  </head>
  <body>
    <!-- Use this element to generate your friends -->
    <div id="timeline"></div>

    <!-- Comment out the begin.js file to see the final solution -->
    <script src="./five-friends.js"></script>
    <!-- Uncomment to see the final solution -->
    <!-- <script src="./end.js"></script> -->
  </body>
</html>

		. Asynchronous programming and making API requests, are two foundational concepts in JavaScript.












