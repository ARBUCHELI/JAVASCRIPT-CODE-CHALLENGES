* Train generator
***************

	- Generators: --> Functions that can be exited, and at a later point in time, reentered while maintaining their context.
	- Generator functions used to be really great in solving problems with asynchronous programming, but recently they've kind of been replaced be JavaScript async await.
	- We declare generator functions with an asterisk following the function keyword.

		function* myGeneratorFunction() {
			yield "value 1"
			yield "value 2"
		}

	- Calling a generator function doesn't immediately execute the body of the function, instead a generator object for the function is returned.
	- We must call the iterator's next() method to hit the next yield value.
	- The next() method returns an object with a "value" property that contains the yielded value, and a "done" property which tells us whether the generator has yielded
	its last value.

		const myGenerator();
		myGenerator.next(); // {value: "value 1", done: false}
		myGenerator.next(); // {value: "value 2", done" false}
		myGenerator.next(); // {value: null, done: true}
	

	Challenge
	---------
		. Build a generator function that returns the next stop in a list of stops along the Metro North Railroad in New York.
		. Each time a button is clicked, the next stop in the journey should be returned until we reach Grand Central Station in New York City.
		. The train stops are:
			. Poughkeepsie.
			. Newburgh.
			. Peekskill.
			. Yonkers.
			. Bronx.
			. Grand Central.

		. On button click, console log the next stop in the journey.
		. Use a generator function.
		. Console log "We made it!" when the journey is complete.
		. Next stop button should be disabled when the journey is complete.


	Solution
	--------

		. Define a generator function with the stop names.
		. Instantiate the getStop generator function, and assign it to the variable nycTrainline

train-generator.js
------------------

function* getStop() {
    yield "Poughkeepsie";
    yield "Newburgh";
    yield "Peekskill";
    yield "Yonkers";
    yield "Bronx";
    yield "Grand Central";
}

const nycTrainline = getStop();

		. In index.html we have a button with an id of next stop.
		. We can grab the button node with document.querySelector and then add the on-click handler.
		. We need to get the current stop and we can do this by calling the next function.
		. If we reached the end of the line, we want to console.log "We made it!" and disable the button.
		. We can disable the button by settting the disable attribute on the button node to true.
		. If we didn't reach the end of the line, we can console.log the current stop value.


index.html
----------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>01_11 Train Stops</title>
  </head>
  <body>
    <!-- Use this element to get to the next stop-->
    <button id="next-stop">Next stop</button>

    <!-- Comment out the begin.js file to see the final solution -->
    <script src="./train-generator.js"></script>
    <!-- Uncomment to see the final solution -->
    <!-- <script src="./end.js"></script> -->
  </body>
</html>


train-generator.js
------------------
function* getStop() {
    yield "Poughkeepsie";
    yield "Newburgh";
    yield "Peekskill";
    yield "Yonkers";
    yield "Bronx";
    yield "Grand Central";
}

const nycTrainLine = getStop();

const nextStopButton = document.querySelector("#next-stop");
nextStopButton.addEventListener("click", () => {
    let currStop = nycTrainLine.next();
    if (currStop.done) {
        console.log("We made it!");
        nextStopButton.setAttribute("disabled", true);
    } else {
        console.log(currStop.value);
    }
})

	- You probably won't encounter generators on a day-to-day basis, but it's good to have a general understanding of what they are and when you would use them.


















	